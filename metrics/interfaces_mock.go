// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_metrics is a generated GoMock package.
package metrics

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMetricService is a mock of MetricService interface
type MockMetricService struct {
	ctrl     *gomock.Controller
	recorder *MockMetricServiceMockRecorder
}

// MockMetricServiceMockRecorder is the mock recorder for MockMetricService
type MockMetricServiceMockRecorder struct {
	mock *MockMetricService
}

// NewMockMetricService creates a new mock instance
func NewMockMetricService(ctrl *gomock.Controller) *MockMetricService {
	mock := &MockMetricService{ctrl: ctrl}
	mock.recorder = &MockMetricServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetricService) EXPECT() *MockMetricServiceMockRecorder {
	return m.recorder
}

// WrapDatabaseTransaction mocks base method
func (m *MockMetricService) WrapDatabaseTransaction(ctx context.Context, config DatabaseTransactionDetails, fn func()) {
	m.ctrl.Call(m, "WrapDatabaseTransaction", ctx, config, fn)
}

// WrapDatabaseTransaction indicates an expected call of WrapDatabaseTransaction
func (mr *MockMetricServiceMockRecorder) WrapDatabaseTransaction(ctx, config, fn interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WrapDatabaseTransaction", reflect.TypeOf((*MockMetricService)(nil).WrapDatabaseTransaction), ctx, config, fn)
}

// MockProvider is a mock of Provider interface
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// GetDatabaseTransaction mocks base method
func (m *MockProvider) GetDatabaseTransaction(ctx context.Context, config DatabaseTransactionDetails) Transaction {
	ret := m.ctrl.Call(m, "GetDatabaseTransaction", ctx, config)
	ret0, _ := ret[0].(Transaction)
	return ret0
}

// GetDatabaseTransaction indicates an expected call of GetDatabaseTransaction
func (mr *MockProviderMockRecorder) GetDatabaseTransaction(ctx, config interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabaseTransaction", reflect.TypeOf((*MockProvider)(nil).GetDatabaseTransaction), ctx, config)
}

// MockTransaction is a mock of Transaction interface
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// GetProvider mocks base method
func (m *MockTransaction) GetProvider() MetricProvider {
	ret := m.ctrl.Call(m, "GetProvider")
	ret0, _ := ret[0].(MetricProvider)
	return ret0
}

// GetProvider indicates an expected call of GetProvider
func (mr *MockTransactionMockRecorder) GetProvider() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvider", reflect.TypeOf((*MockTransaction)(nil).GetProvider))
}

// GetType mocks base method
func (m *MockTransaction) GetType() TransactionType {
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(TransactionType)
	return ret0
}

// GetType indicates an expected call of GetType
func (mr *MockTransactionMockRecorder) GetType() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockTransaction)(nil).GetType))
}

// StartTransaction mocks base method
func (m *MockTransaction) StartTransaction() {
	m.ctrl.Call(m, "StartTransaction")
}

// StartTransaction indicates an expected call of StartTransaction
func (mr *MockTransactionMockRecorder) StartTransaction() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransaction", reflect.TypeOf((*MockTransaction)(nil).StartTransaction))
}

// EndTransaction mocks base method
func (m *MockTransaction) EndTransaction() {
	m.ctrl.Call(m, "EndTransaction")
}

// EndTransaction indicates an expected call of EndTransaction
func (mr *MockTransactionMockRecorder) EndTransaction() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndTransaction", reflect.TypeOf((*MockTransaction)(nil).EndTransaction))
}
